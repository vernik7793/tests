Topics:

>>>Test01 - Bubble sort
Реализовать пузырьковую сортировку


>>>Test02 - Insertion sort
Реализовать сортировку вставкой


>>>Test03 - Selection sort
Реализовать сортировку выбором


>>>Test04 - Binary search
Реализовать бинарный поиск элемента в отсоритированном массие
Позиции в массиве начинаются с нулевого индекса
Если элемент найден, возвращаем его позицию
Если элемент не найден, возвращаем позицию (со знаком "-")
в которую его можно вставить, не нарущая сортировку массива


>>>Test05 - Search maximum
Реализовать поиск масмилального элемента в массиве


>>>Test06 - Array equals
Реализовать метод сравнения элеметнов двух массивой
true - если массивы содержат одинаковые элементы


>>>Test07 - Array sub
Реализовать метод возвращающий диапазон элементов массива с start индеска длиной length


>>>Test08 - Interval Iterator
Написать итератор для перебора интервала от left до right с шагом 1


>>>Test09 - Merge Iterator
Получает два Iterable, возвращающие итераторы на сортированные последовательности,
и сливает в Iterable возвращающий итератор на сортированную
последовательность образованную в результате слияния


>>>Test10 - Squares Iterator
Дописать SquaresIterator чтобы возвращал квадраты целых чисел
большие или равные left и меньшие right


>>>Test11 - Input stream to Iterator
Сделать адаптер к InputStream, чтобы его можно было использовать как итератор


>>>Test12 - Comparable User
Написать compareTo для сравнения age в порядке возрастания
Написать toString, HashCode и Equals


>>>Test13 - Equals, HashCode, toString Person
Считать, что порядок адресов в массиве - важен.
Написать в классе Person метод hashCode.
Написать в классе Person метод toString.
Написать в классе Person метод equals.

Написать в классе Person метод CompareTo.
Считать что раньше должен стоять тот, кто моложе, если равного возраста, то тот у кого имя
лексиграфически меньше (считайте null больше всех), если имена совпадают, то на адресах определите
порядок сами (но он должен быть корректным - антисимметричным, транзитивным).

корректно обработать ситуации когда поле ссылочного типа равно null.
кореектно обрабатывать массив нулевой длины

порядок адресов в массиве - важен, если массивы адресов [address0, address1, address2]
и [address2, address1, address0] считаются не эквивалентными.


>>>Test14 - Comparator User
Написать Comparator для сравнения возраста User'а в порядке убывания
Написать Comparator для сравнения имени User'а в лексикографическом порядке


>>>Test15 - Simple Array List
В классе SimpleArrayList реализовать методы:
 1) remove(Object value)
 2) iterator()
 3) toString()
 4) equals(Object other)
 5) hashCode()
 6) contains()
 Они должны вести себя так же, как и соответствующие методы java.util.ArrayList.


>>>Test16 - Simple Linked List
В классе SimpleLinkedList реализовать методы:
 1) remove(Object value)
 2) iterator()
 3) toString()
 4) equals(Object other)
 5) hashCode()
 6) contains()
 Они должны вести себя так же, как и соответствующие методы java.util.LinkedList.


>>>Test17 - Simple HashMap
Реализовать методы Get, Contains, Remove


>>>Test18 - Simple Exception
На месте каждого комментария можно:
 - оставить комментарий
 - вставить throw new NullPointerException();
 - вставить throw new Error();
 Исправьте тесты. Допишите примеры всех возможных вариантов.
 Цифрмы должны быть отсортированы в лексикографическом порядке.


>>>Test19 - MultiCatch Exception
На месте каждого комментария можно:
 - оставить комментарий
 - вставить throw new NullPointerException();
 - вставить throw new RuntimeException();
 - вставить throw new IOException();
 - вставить throw new Error();
 Исправьте тесты. Допишите примеры всех возможных вариантов.
 Варианты должны быть отсортированы в лексикографическом порядке.


>>>Test20 - Node Exception
Ограничения задачи:
    1) нельзя вызывать методы getValue/setValue/getNext/setNext
        класса Node предварительно не вызвав его метод lock()
    	(предварительно надо заблокировать)
    2) нельзя у заблокированного нода вызвать lock()
    	(нельзя повторно блокировать)
    3) нельзя вызвать метод unlock() у незаблокированного нода
    	(нельзя разблокировать незаблокированное)
    4) нельзя по окoнчанию метода change оставить хотя бы один нод заблокированным
    5) любой из следующих методов класса Node
    	(lock, getValue, setValue, getNext, setNext)
    	может вызвать исключение InterruptedException.
    	Если оно было выброшено, но метод ничего не изменил.
    	Т.е. если метод lock() выбросил исключение, то нод не заблокирован.

    Задание:
    Требуется реализовать метод change(...)
     (в любом из стилей - рекурсивном или итеративном),
      который удовлетворяет Ограничениям Задачи и кроме того:
    1) примененный к списку в котором ЕСТЬ oldValue
     - либо заменяет первое вхождение oldValue на newValue
     и возвращает true, либо, если вызов одного из методов,
     генерирующих InterruptedException, выбросил исключение
     InterruptedException 100 раз подряд, то и метод change
     выбрасывает InterruptedException (предварительно разблокировав все ноды).
    2) примененный к списку в котором НЕТ oldValue
     - либо доходит до хвоста списка, убеждается что oldValue
     нет в списке и возвращает false, либо, если вызов одного
     из методов генерирующих InterruptedException выбросил исключение
     InterruptedException 100 раз подряд, то и метод change выбрасывает
     InterruptedException (предварительно разблокировав все ноды).

    Заметьте, если некоторый метод выбросил исключение 99 раз подряд,
    а потом выполнился, то "накопленные исключения - сгорают".
    Т.е. следующий метод может опять выбросить 99 исключений.
    Будем считать, что возможны только InterruptedException.
    Не готовить код к другим типам (скажем, наследникам Error и RuntimeException).


>>>Test21 - SparseMatrix
Разряженная матрица огромного размера 2млрд * 2млрд
 Для хранения каждой ячейки в памяти просто не хватит места!
 Экономим память, храним только те ячейки, которые используются
 Реализовать:
 - get и set элемента, с помощью List и Set
 - получение всех элементов лежащих на одной горизонтали и вертикали, с помощью List и Set


>>>Test22 - BOSWithStrategyWithoutCoping
 В OutputStream используется pattern Tamplate Method для реализации метода write()
 Реализовать методы
 - write(byte b[])
 - write(byte[] b, int off, int len)
 - writeTo(OutputStream out)
 При достижении максимального размера буфера, измените стратегию увеличения.
 Увеличивайте не в два, а в полтора раза


>>>Test23 - RecursionEmployee
 - Реализуйте метод toString у Address
 - Реализуйте метод toString у CyclicEmployee, который "обрезает" вложенные поля,
 которые могут привести к рекурсии
 - Реализуйте метод toString у NestedEmployee. Он должен работать следующим образом:
 NestedEmployee emp = ...
 System.out.println(emp);
 NestedEmployee[age=.., name=.., address=Address[..], phone = Phone[...]]
 - Реализуйте метод toString у Phone. Он должен работать следующим образом:
 System.out.println(new Phone(777, 1234567));
 Phone[(777) 123-45-67]
 - Реализуйте метод toString у RecursionEmployee,
 который "разворачивает" вложенные поля, пока не встретит цикл.
 Пример: проанализируйте, как реализован Arrays.deepToString(...)


>>> Test24 - SingleElementBuffer
Система с одним производителем и пятью потребителеми
через некоторое время уходит в DeadLock...
помогите автору исправить досадную ошибку в реализации буфера.
Исправления нужно делать в классе SingleElementBuffer


>>> Test25 - BlockedBoundedArrayBuffer
Реализовать BlockedBoundedArrayBuffer
с ограниченным буфером (массивом из 10 элементов)
Дописать методы get и put


>>> Test26 - SingleElementBufferTimed
Задание: Вам дана "заготовка" класса SingleElementBufferTimed,
который должен в случае превышения времени ожидания в wait(long)
выбросить исключение TimeoutException.



- Concurrency ?

Возможно:
- TestArea
- I/O ?
- CopyIO ?
- Sniffer ?